name: tests

on:
  push:
    branches: [main]
  pull_request:
  schedule:
    # Run every Sunday
    - cron: "0 0 * * 0"
  workflow_dispatch:

jobs:
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: extractions/setup-just@v2

      - uses: prefix-dev/setup-pixi@v0.8.4
        with:
          cache: true
          cache-key: default
          environments: >-
            default
            typecheck

      - name: Lint
        run: |
          just lint

      - name: Typecheck
        run: |
          just typecheck

  tests:
    name: Tests (${{ matrix.os }}, Python ${{ matrix.python-version }})
    needs: code-quality
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
      - uses: actions/checkout@v4

      - name: Get environment name
        id: env_name
        run: |
            env_name="test-py${${{ matrix.python-version }}//./}"
            echo "env_name=${env_name}" | tee -a "$GITHUB_OUTPUT"

      - uses: extractions/setup-just@v2

      - uses: prefix-dev/setup-pixi@v0.8.4
        with:
          cache: true
          cache-key: ${{ steps.env_name.outputs.env_name }}
          environments: ${{ steps.env_name.outputs.env_name }}

      - name: Run tests
        run: |
          just python=${{ matrix.python-version }} test

      - name: Upload test outputs
        uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: test-outputs-${{ matrix.os }}-python-${{ matrix.python-version }}
          path: tests/_outputs


      - name: Upload coverage to codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          fail_ci_if_error: ${{ (github.event_name == 'push' && true) || (github.event_name == 'pull_request' && true) || false }}
        if: ${{ matrix.os == 'ubuntu-latest' }}

  test-build-and-install:
    name: Build distribution and test installation
    needs: code-quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # - uses: mamba-org/setup-micromamba@v2

      # - uses: astral-sh/setup-uv@v5

      # - name: Build distribution
      #   run: |
      #     uvx nox -s build

      # - name: Test wheel with extras matrix
      #   run: |
      #     uvx nox -s test_wheel --verbose

      # - name: Test sdist
      #   run: |
      #     uvx nox -s test_sdist --verbose


  notify:
    name: Notify failed build
    needs: [code-quality, tests, test-build-and-install]
    if: failure() && github.event.pull_request == null
    runs-on: ubuntu-latest
    steps:
      - uses: jayqi/failed-build-issue-action@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
